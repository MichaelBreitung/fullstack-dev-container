FROM ubuntu:22.04

# LABEL for the custom image
LABEL maintainer="breitung.michael@gmail.com"
LABEL version="0.3.0"
LABEL description="This is a custom Docker Image for Fullstack Development."

# Disable Prompt During Packages Installation
ARG DEBIAN_FRONTEND=noninteractive

# Setting bash as default shell
SHELL ["/bin/bash", "-c"]

# Setting environment variables
ENV NVM_DIR=/usr/local/nvm
ENV NODE_VERSION=v20.11.0
ENV GO_VERSION=1.23.4
ENV HELM_VERSION=3.16.4

# Locale required for Ansible
ENV LC_ALL="C.UTF-8" 

# Update Ubuntu Software repository and install tools
RUN apt-get update && apt-get upgrade -y && apt-get install -y --no-install-recommends \
  sudo=1.9.9-1ubuntu2.4 \
  iputils-ping=3:20211215-1 \
  git=1:2.34.1-1ubuntu1.11 \
  git-lfs=3.0.2-1ubuntu0.3 \
  python3.11=3.11.0~rc1-1~22.04 \
  python3-pip=22.0.2+dfsg-1ubuntu0.5 \
  ca-certificates=20240203~22.04.1 \
  curl=7.81.0-1ubuntu1.20 \
  openssh-server=1:8.9p1-3ubuntu0.10 \
  wget=1.21.2-2ubuntu1 \
  postgresql-client=14+238 \
  bc=1.07.1-3build1 \
  jq=1.6-2.1ubuntu3 \
  unzip=6.0-26ubuntu3.2 && \
  apt-get clean -y && \
  rm -rf /var/lib/apt/lists/*

# make python 3.11 the default
RUN rm /usr/bin/python3 && ln -s /usr/bin/python3.11 /usr/bin/python3

# Install basic python packages
RUN pip3 install --no-cache-dir --upgrade \
  pip \
  pytest==8.3.2 \
  pytest-asyncio==0.24.0 \
  black==24.3.0 \
  pylint==3.1.0 \
  mypy==1.11.1 \
  ansible==10.4.0 \
  requests==2.32.3 \
  Jinja2==3.1.4 \
  sseclient==0.0.27 \
  argparse \
  pip-system-certs==4.0
# Use of installed certificates is enabled via pip-system-certs - required for Ansible

# Install Node using NVM
RUN mkdir -p $NVM_DIR && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash && \
  source $NVM_DIR/nvm.sh && \
  nvm install "$NODE_VERSION" && \
  ln -s $NVM_DIR/versions/node/$NODE_VERSION/bin/node /usr/local/bin/node && \
  ln -s $NVM_DIR/versions/node/$NODE_VERSION/bin/npm /usr/local/bin/npm && \
  ln -s $NVM_DIR/versions/node/$NODE_VERSION/bin/npx /usr/local/bin/npx 

# Install Go
RUN curl -L -o "go.tar.gz" "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz" && \
  tar -C /usr/local -xzf "go.tar.gz" && \
  rm "go.tar.gz"

# Update path
ENV PATH="$PATH:/usr/local/go/bin"

# Install Docker
RUN install -m 0755 -d /etc/apt/keyrings && \
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc && \
  chmod a+r /etc/apt/keyrings/docker.asc

RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo $VERSION_CODENAME) stable" | \
  tee /etc/apt/sources.list.d/docker.list > /dev/null 
RUN apt update && apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Install Kubectl
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
  sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

# Install Helm
RUN curl -fsSL -o helm.tar.gz "https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz" && \
  tar -zxvf helm.tar.gz && \
  mv linux-amd64/helm /usr/local/bin/helm && \
  rm -rdf linux-amd64

